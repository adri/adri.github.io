---
layout: post
title: Learning Elixir: My first Side-Project
summary: 
categories: elixir, side-project
image: 
published: false
---

I believe that to really learn a programming language, you have to get involved in a project. [Getting an overview of the Elixir language](/post/why-elixir-has-great-potential) was great. But to be able to **learn about the details of Elixir and its ecosystem** I needed a side-project.

## Finding a problem to solve
Like many developers who want to learn a new technology, I needed a problem to solve. I had to find a nail for a new hammer. 

> If all you have is a hammer, everything looks like a nail.
  [Abraham Maslow](https://en.wikipedia.org/wiki/Abraham_Maslow)

Luckily there was a need at my work for a planning poker tool that is integrated with Jira and works well with remote developers. 

## Estimations for Remote Teams
[Planning poker](https://en.wikipedia.org/wiki/Planning_poker) is an estimation technique used in agile software development. Usually this is done with real paper cards. In a remote-friendly environment, real cards are not always useful. 

At work we used the web-based tool [PlanITpoker](http://www.planitpoker.com) for a while but we missed an integration with Jira, our issue tracker.  We also had some issues with people joining twice, when using the tool at the same time on the phone and on the notebook. 

To me this sounded like a nice challenge for learning Elixir. The challange involved **presence detection** of team members, **synchronising estimations** and **using external APIs**. I found my nail!

### The Plan
To get something usable, I wanted to implement the following functionality. Everything was geared towards the specific use-case we have. **Learning Elixir was the focus**, the product was secondary. 

1. Import stories from Jira  
2. Estimate. This involves:
	- Multiple *team members* who estimate a story
	- A *moderator* who selects a story to estimate and sets an estimation 
3. Set estimations on stories in Jira

### How does it look like?
I wanted to spend as little time as possible on the user interface. This meant for me using a [template](https://www.creative-tim.com/product/paper-kit) and hacking the needed Javascript. This is how **step 1 Import stories from Jira** looks like:

![Select stories to estimate](https://user-images.githubusercontent.com/133832/27861877-f3be3b7c-6182-11e7-8eba-3d1cfa4a260a.png)

**Step 2  Estimate and step 3 set stories in Jira** is best shown in a short video. Here you can see an estimation of one story from the perspective of a *moderator*:

<iframe width="560" height="315" src="https://www.youtube.com/embed/uEaGnlmUaWE" frameborder="0" allowfullscreen></iframe>

## What I learned 


#### Jira API
[HTTPoison](https://github.com/edgurgel/httpoison) eases creating API clients in Elixir. I like the concept of using adapters to external APIs and using [`HTTPoison.Base`](https://github.com/edgurgel/httpoison#wrapping-httpoisonbase) allows this in a concise manner. Example:

```
defmodule Jira.API do
  use HTTPoison.Base
 
  def process_url(url) do
    Application.get_env(:jira, :host) <> url
  end
    def process_response_body(body) do
    body
    |> decode_body
  end
#### Caching
con_cache
#### Phoenix Presence
#### Phoenix Channels
#### GitHub authentication
#### Intellij Elixir plugin

- Phoenix 1.3

The source code can be found [on Github](https://github.com/adri/estimator). 

## Deployment
- heroku with [Github integration](https://devcenter.heroku.com/articles/github-integration)
- pryn

## What is Elixir particularly good for?
Having a background in mostly PHP and Node, I'd say Elixir can be used for everything I would use PHP or Node for.

## What's next?

* Testing
* Cleanup 
	* credo
	* Think more about code structure and runtime concerns based on the article [To spawn, or not to spawn?](http://theerlangelist.com/article/spawn_or_not)
* GraphQL with Absinthe with subscriptions
* CI setup 

