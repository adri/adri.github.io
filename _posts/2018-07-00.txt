---
layout: post
title: "Deptrac"
summary: How to setup a micro controller to control a ventilation system and integrate it with Apple HomeKit. 
categories: CC1101, ESP8266, HomeKit, Arduino, home automation
image: https://user-images.githubusercontent.com/133832/42869060-3f6a7818-8a74-11e8-8b89-f88419b3c90b.jpg
published: false
---


## How we use deptrac to document and validate architecture decisions 
Every day, in every software project, I structure code in a certain way. There are always reasons why the code is structured in that way. One reason might be that the team agreed to follow a certain design pattern. Or maybe certain performance characteristics need to be met. 

### Architecture decisions
In many software projects that I worked on, those reasons are not immediately visible. Having the reasons visible would give developers context and a better understanding of the code. This is helful with: 

- on-boarding of new developers
- aligning a team on architecture decisions
- take reasons into consideration when changing software 
- keep long-term goals in mind 

At TicketSwap we started documenting these reasons in a format called ADR (Architecture Devision Records). These are lightweight documents which give a reason and context to an architecture decision. Documentation is great, but it has a risk of getting out of date. How can we help ourselves to keep ensure ADRs are updated? 

Many smart people have thought about this. One helpful tool in the PHP community is [sensiolabs-de/deptrac](https://github.com/sensiolabs-de/deptrac).

### Deptrac  
This CLI tool allows you to define layers and code structure rules in YAML. You can validate that these rules are always met by integrating a validation step into your CI pipeline. 

Not all architecture decisions are about code structure. But for the ones that are, the tool can help to ensure that the underlying ADR is up to date. It saves time in code reviews because I donâ€™t have to check that the ADRs are followed. 

### Example 1: Domain Separation
In a financial service, we want to keep the `customer` domain isolated. 

#
# This means:
# - Customer controllers can only use Customer commands
# - Customer command handlers handle Customer commands and only push Customer events
# - Customer subscribers only handle Customer events


### Example 2: 

### Integration in CI Pipelien




