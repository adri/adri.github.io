{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/building-adaptive-systems","result":{"data":{"brainNote":{"slug":"building-adaptive-systems","title":"Building adaptive systems","inboundReferenceNotes":[{"title":"Scalability of software systems","slug":"scalability-of-software-systems"}],"inboundReferences":["scalability-of-software-systems"],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"[\", \"[Talk]\", \"] by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/chris-keathley\"\n  }), \"Chris Keathley\")), mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/-oQl1xv0hDk\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"h3\", null, \"Little's law\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"elements in the queue = arrival rate * avg processing time\\n\")), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"requests = rps * ms\\n\")), mdx(\"h3\", null, \"Overload mitigation\"), mdx(\"p\", null, \"Arrival rate and processing time need be be under control. The only way to do this is to drop requests.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Load shedding\"), \": Upstream or downstream service drops requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Autoscaling\"), \": It's not a solution. Adding more capacity helps. However the limit is just moved. Only using CPU for scaling is not enough. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Circuit breakers\"), \": Only a partial solution as they stop all traffic to the downstream service, even though some traffic could still be handled.\")), mdx(\"h3\", null, \"Adaptive concurrency\"), mdx(\"p\", null, \"Dynamically find out the limits of sending and receiving systems and use load shedding.\"), mdx(\"p\", null, \"Signals used to set limits:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Latency\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Successful vs failed requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Additive Increase Multiplicative Decrease: Success: limit + 1, Backoff: limit * 0,95 \")), mdx(\"h3\", null, \"Source\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=-oQl1xv0hDk\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Youtube talk\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/keathley/regulator\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Regulartor Elixir library\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/published\"\n  }), \"#published\"), \" \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"[ Talk ] by  Chris Keathley Little's law For example: Overload mitigation Arrival rate and processing time need be be under control. Theâ€¦","timeToRead":1}}},"pageContext":{"slug":"building-adaptive-systems"}},"staticQueryHashes":["318001574","3787687951"]}