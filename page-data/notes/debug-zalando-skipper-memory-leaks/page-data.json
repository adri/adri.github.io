{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/debug-zalando-skipper-memory-leaks","result":{"data":{"brainNote":{"slug":"debug-zalando-skipper-memory-leaks","title":"Debug Zalando Skipper memory leaks","inboundReferenceNotes":[{"title":"Site Reliability Engineering","slug":"site-reliability-engineering"}],"inboundReferences":["site-reliability-engineering"],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To find out what memory is leaking exactly, Skipper has an option to enable the go profiling tools (pprof). \"), mdx(\"h3\", null, \"How to profile\"), mdx(\"p\", null, \"When running Skipper inside of Kubernetes:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Configure \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-enable-profile\"), \" when starting Skipper\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Proxy to a Skipper pod \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"kubectl port-forward skipper-ingress-pzx2b 9911:9911\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Go to \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://127.0.0.1:9911/debug/pprof/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"http://127.0.0.1:9911/debug/pprof/\"), \" and download a dump full goroutine stack dump, wait a few minutes, and download another dump\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Install goroutine-inspect and run it $GOPATH/bin/goroutine-inspect\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a diff (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"l\"), \" = only in original, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"c\"), \" = in both, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"r\"), \" = in original 2)\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"original = load(\\\"goroutine.dump\\\")\\noriginal2 = load(\\\"goroutine2.dump\\\")\\nl, c, r = original.diff(original2)\\nc.show()\\n\")))), mdx(\"p\", null, \"The content of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c\"), \" is a list of all goroutines that are in both dumps. This means that the goroutine is not cleaned up between the dumps.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../../notes/published\"\n  }), \"#published\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"To find out what memory is leaking exactly, Skipper has an option to enable the go profiling tools (pprof).  How to profile When runningâ€¦","timeToRead":1}}},"pageContext":{"slug":"debug-zalando-skipper-memory-leaks"}},"staticQueryHashes":["318001574","3787687951"]}