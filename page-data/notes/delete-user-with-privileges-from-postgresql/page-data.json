{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/delete-user-with-privileges-from-postgresql","result":{"data":{"brainNote":{"slug":"delete-user-with-privileges-from-postgresql","title":"Delete user with privileges from PostgreSQL","inboundReferenceNotes":[],"inboundReferences":[],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Deleting a user with privileges in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../../notes/postgresql\"\n  }), \"PostgreSQL\"), \" can throw errors like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Query 1 ERROR: ERROR:  user \\\"<user name>\\\" cannot be dropped because some objects depend on it\\nDETAIL:  privileges for default privileges on new relations belonging to user test\\nprivileges for default privileges on new relations belonging to user test2\\nprivileges for default privileges on new relations belonging to user test3\\n\")), mdx(\"p\", null, \"There are three privilege levels:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"User to user \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Schema to user \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Table to user\")), mdx(\"h3\", null, \"List all privileges assigned\"), mdx(\"p\", null, \"First find out what privileges are assigned. This lists all of them.\"), mdx(\"p\", null, \"How to read the table:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"obowner\"), \": shows the owner of the resource.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"objname\"), \": specifies if it's a table or schema privilege.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aclstring\"), \":   specifies the access control.  Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"reporting_etl=arwdRxt/looker\"), \". This means user \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"looker\"), \" is owner and reporting_etl has privilege on.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  })), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"SELECT pg_get_userbyid(b.relowner)::text AS objowner, \\n        trim(c.nspname)::text AS schemaname,  \\n        b.relname::text AS objname,\\n        CASE WHEN relkind='r' THEN 'table' ELSE 'view' END::text AS objtype, \\n        TRIM(SPLIT_PART(array_to_string(b.relacl,','), ',', NS.n))::text AS aclstring, \\n        NS.n as grantseq,\\n        null::text as colname\\n        FROM \\n        (SELECT  oid,generate_series(1,array_upper(relacl,1))  AS n FROM pg_catalog.pg_class) NS\\n        INNER JOIN pg_catalog.pg_class B ON b.oid = ns.oid AND  NS.n <= array_upper(b.relacl,1)\\n        INNER JOIN pg_catalog.pg_namespace c on b.relnamespace = c.oid\\n        where relkind in ('r','v')\\n        UNION ALL\\n        SELECT pg_get_userbyid(c.relowner)::text AS objowner, \\n        trim(d.nspname)::text AS schemaname,  \\n        c.relname::text AS objname,\\n        'column'::text AS objtype, \\n        TRIM(SPLIT_PART(array_to_string(b.attacl,','), ',', NS.n))::text AS aclstring, \\n        NS.n as grantseq,\\n        b.attname::text as colname\\n        FROM \\n        (SELECT attrelid,generate_series(1,array_upper(attacl,1))  AS n FROM pg_catalog.pg_attribute_info) NS\\n        INNER JOIN pg_catalog.pg_attribute_info B ON b.attrelid = ns.attrelid AND  NS.n <= array_upper(b.attacl,1)\\n        INNER JOIN pg_catalog.pg_class c on b.attrelid = c.oid\\n        INNER JOIN pg_catalog.pg_namespace d on c.relnamespace = d.oid\\n        where relkind in ('r','v')\\n        UNION ALL\\n        SELECT pg_get_userbyid(b.nspowner)::text AS objowner,\\n        null::text AS schemaname,\\n        b.nspname::text AS objname,\\n        'schema'::text AS objtype,\\n        TRIM(SPLIT_PART(array_to_string(b.nspacl,','), ',', NS.n))::text AS aclstring,\\n        NS.n as grantseq,\\n        null::text as colname\\n        FROM \\n        (SELECT oid,generate_series(1,array_upper(nspacl,1)) AS n FROM pg_catalog.pg_namespace) NS\\n        INNER JOIN pg_catalog.pg_namespace B ON b.oid = ns.oid AND NS.n <= array_upper(b.nspacl,1)\\n        UNION ALL\\n        SELECT pg_get_userbyid(b.datdba)::text AS objowner,\\n        null::text AS schemaname,\\n        b.datname::text AS objname,\\n        'database'::text AS objtype,\\n        TRIM(SPLIT_PART(array_to_string(b.datacl,','), ',', NS.n))::text AS aclstring,\\n        NS.n as grantseq,\\n        null::text as colname\\n        FROM \\n        (SELECT oid,generate_series(1,array_upper(datacl,1)) AS n FROM pg_catalog.pg_database) NS\\n        INNER JOIN pg_catalog.pg_database B ON b.oid = ns.oid AND NS.n <= array_upper(b.datacl,1) \\n        UNION ALL\\n        SELECT pg_get_userbyid(b.proowner)::text AS objowner,\\n        trim(c.nspname)::text AS schemaname, \\n        textin(regprocedureout(b.oid::regprocedure))::text AS objname,\\n        decode(prorettype,0,'procedure','function')::text AS objtype,\\n        TRIM(SPLIT_PART(array_to_string(b.proacl,','), ',', NS.n))::text AS aclstring,\\n        NS.n as grantseq,\\n        null::text as colname  \\n        FROM \\n        (SELECT oid,generate_series(1,array_upper(proacl,1)) AS n FROM pg_catalog.pg_proc) NS\\n        INNER JOIN pg_catalog.pg_proc B ON b.oid = ns.oid and NS.n <= array_upper(b.proacl,1)\\n        INNER JOIN pg_catalog.pg_namespace c on b.pronamespace=c.oid \\n        UNION ALL\\n        SELECT null::text AS objowner,\\n        null::text AS schemaname,\\n        lanname::text AS objname,\\n        'language'::text AS objtype,\\n        TRIM(SPLIT_PART(array_to_string(b.lanacl,','), ',', NS.n))::text AS aclstring,\\n        NS.n as grantseq, \\n        null::text as colname\\n        FROM \\n        (SELECT oid,generate_series(1,array_upper(lanacl,1)) AS n FROM pg_catalog.pg_language) NS\\n        INNER JOIN pg_catalog.pg_language B ON b.oid = ns.oid and NS.n <= array_upper(b.lanacl,1)\\n        UNION ALL\\n        SELECT pg_get_userbyid(b.defacluser)::text AS objowner,\\n        trim(c.nspname)::text AS schemaname,\\n        decode(b.defaclobjtype,'r','tables','f','functions','p','procedures')::text AS objname,\\n        'default acl'::text AS objtype,\\n        TRIM(SPLIT_PART(array_to_string(b.defaclacl,','), ',', NS.n))::text AS aclstring,\\n        NS.n as grantseq, \\n        null::text as colname\\n        FROM \\n        (SELECT oid,generate_series(1,array_upper(defaclacl,1)) AS n FROM pg_catalog.pg_default_acl) NS\\n        INNER JOIN pg_catalog.pg_default_acl b ON b.oid = ns.oid and NS.n <= array_upper(b.defaclacl,1) \\n        LEFT JOIN  pg_catalog.pg_namespace c on b.defaclnamespace=c.oid\\n\")), mdx(\"h3\", null, \"Change ownership\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"alter table table_name owner to <new user name>;\\nalter schema schema_name  owner to <new user name>;\\n\")), mdx(\"h3\", null, \"Revoke default privileges (user to user)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"ALTER DEFAULT PRIVILEGES FOR USER <fromuser_name> REVOKE ALL ON TABLEs FROM <user_tobe_removed>;\\n\")), mdx(\"h3\", null, \"Change table privileges (table to user)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"revoke all on table table_name from <new user name>;\\n\")), mdx(\"h3\", null, \"Change schema privileges (schema to user)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"revoke all on schema schema_name from <new user name>;\\n\")), mdx(\"h3\", null, \"Drop the user\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"DROP USER <user name>;\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../../notes/published\"\n  }), \"#published\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Deleting a user with privileges in  PostgreSQL  can throw errors like this: There are three privilege levels: User to user  Schema to user…","timeToRead":1}}},"pageContext":{"slug":"delete-user-with-privileges-from-postgresql"}},"staticQueryHashes":["318001574","3787687951"]}