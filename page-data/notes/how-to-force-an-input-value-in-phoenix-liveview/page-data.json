{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/how-to-force-an-input-value-in-phoenix-liveview","result":{"data":{"brainNote":{"slug":"how-to-force-an-input-value-in-phoenix-liveview","title":"How to force an input value in Phoenix LiveView","inboundReferenceNotes":[],"inboundReferences":[],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When a input field is in focus, any changes that are done to the value won't be applied. This is done to avoid changes from the server overwriting the value a user is typing.\"), mdx(\"p\", null, \"However sometimes it is handy to set the value anyway, for example when accepting a query suggestion in a search autocomplete UI.\"), mdx(\"h3\", null, \"Hook\"), mdx(\"p\", null, \"Add a hook that reacts on events from the server:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const ForceInputValue = {\\n  mounted() {\\n    this.handleEvent(\\n      \\\"force-input-value\\\",\\n      ({ value }) => (this.el.value = value)\\n    );\\n  },\\n};\\n\\nlet liveSocket = new LiveSocket(\\\"/live\\\", Socket, {\\n  hooks: { ForceInputValue },\\n  params: { _csrf_token: csrfToken },\\n});\\n\")), mdx(\"h3\", null, \"Template\"), mdx(\"p\", null, \"Add the hook to the input field:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<input\\n    phx-hook=\\\"ForceInputValue\\\"\\n    id=\\\"search-input\\\"\\n    value=\\\"<%= @query %>\\\" />\\n    name=\\\"query\\\" />\\n\")), mdx(\"h3\", null, \"LiveView\"), mdx(\"p\", null, \"Push an event to the client when you want to force a value on an input even though it is in focus. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-elixir\"\n  }), \"  def handle_event(\\n        \\\"accept-suggestion\\\",\\n        %{\\\"key\\\" => \\\"ArrowRight\\\"},\\n        %{assigns: %{suggestion: suggestion}} = socket\\n      ) do\\n    {:noreply, socket |> push_event(\\\"force-input-value\\\", %{value: suggestion})}\\n  end\\n\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/phoenixliveview\"\n  }), \"#PhoenixLiveView\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/published\"\n  }), \"#published\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"When a input field is in focus, any changes that are done to the value won't be applied. This is done to avoid changes from the serverâ€¦","timeToRead":1}}},"pageContext":{"slug":"how-to-force-an-input-value-in-phoenix-liveview"}},"staticQueryHashes":["318001574","3787687951"]}