{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/idea","result":{"data":{"brainNote":{"slug":"idea","title":"idea","inboundReferenceNotes":[{"title":"Import Github stars","slug":"import-github-stars","childMdx":{"excerpt":"When starring a repository on Github, I already generate an RSS feed. It's hosted on now.sh and reachable under:  https://github-stars-feed…"}},{"title":"Import Twitter likes","slug":"import-twitter-likes","childMdx":{"excerpt":"I already get an email when I like a tweet on Twitter. Also copy those likes into my notes. #published   #tool   #idea  "}},{"title":"Import notes from Instapaper","slug":"import-notes-from-instapaper","childMdx":{"excerpt":"#tool   #idea   Instapaper I store articles on blogs/website in the read-it-later service  Instapaper .  Instapaper has an iOS app and sends…"}},{"title":"Import notes from Kindle","slug":"import-notes-from-kindle","childMdx":{"excerpt":"Highlights of books are available online via this  link . Using a  applescript Import into markdown format Sources Clippings.txt based…"}},{"title":"Notes database","slug":"notes-database","childMdx":{"excerpt":"Collect notes from all sorts of sources into one big linked \"database\". Over time this builds a valuable knowledge graph. Methods…"}},{"title":"Scale Kubernetes pods based on domain events","slug":"scale-kubernetes-pods-based-on-domain-events","childMdx":{"excerpt":"Some domain events can trigger many users hitting a website. For example when a notification about popular content is sent out to a large…"}}],"inboundReferences":["import-github-stars","import-twitter-likes","import-notes-from-instapaper","import-notes-from-kindle","notes-database","scale-kubernetes-pods-based-on-domain-events"],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":""}}},"pageContext":{"slug":"idea"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}