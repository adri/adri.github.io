{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/pre-build-symfony-caches-in-docker-containers","result":{"data":{"brainNote":{"slug":"pre-build-symfony-caches-in-docker-containers","title":"Pre-build Symfony Caches in Docker Containers","inboundReferenceNotes":[{"title":"Optimizing auto-scaling on Kubernetes","slug":"optimizing-auto-scaling-on-kubernetes"}],"inboundReferences":["optimizing-auto-scaling-on-kubernetes"],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In a typical Symfony project there are multiple caches built when running the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cache:warmup\"), \" command. By pre-building those caches and putting them into the container, the startup time can be reduced. \"), mdx(\"h3\", null, \"Doctrine\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Metadata Cache\"), \": Stores class metadata. \\u2705 Already in container\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Query Cache\"), \": Stores DQL queries converted to SQL. This is generated at runtime.\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"\\uD83D\\uDCA1Can be collected on CI -> Turned out to be too complex, instead I recommend to use a cache with 2 adapters: a local file cache backed by a shared external cache like Redis.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Result Cache\"), \": Stores results of queries. \\u274COnly at runtime\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Proxy directory\"), \": Generated proxy objects which make lazy loading of entities possible. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/var/www/app/var/cache/[env]/doctrine/orm/Proxies\"), \" \\u2705 Already in container\")), mdx(\"h3\", null, \"Symfony\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Route annotations\"), \": Parsed controller route annotations.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Container\"), \": Service configuration and initialization. \\u26A0\\uFE0F contains credentials when using parameters. Switch to environment variables instead.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Translations\"), \":  \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/var/www/app/var/cache/[env]/translations/catalogue.gl.whsXFTx.php\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Annotations\"), \": A huge file of all annotations \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/var/www/app/var/cache/[env]/annotations.php\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Routes\"), \":  \\u26A0\\uFE0F contains domain names \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/var/www/app/var/cache/[env]/url_generating_routes.php\"))), mdx(\"h3\", null, \"Twig\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Template cache\"), \": Twig templates compiled to PHP files.\")), mdx(\"h3\", null, \"Use env variables instead of parameters\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a script that checks that all parameters are accessed with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"%env(parameter_name)%\"), \" to not leak any parameters\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Replace parameters with environment variables in Website project\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a script that checks that no parameter values are included in the generated container\")), mdx(\"p\", null, \"How to test:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Build a new image that includes cache warm-up while building (and removes it from the entrypoint.sh)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start the image with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CACHE_WARMUP=0\"), \" and run a request or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bin/console\"), \". Run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"docker diff [image-hash]\"), \" to list the changed files since the start. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The output should show show no files in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var/cache/[env]/ContainerXYZ\"), \" and way less files compared to running the image with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"CACHE_WARMUP=1\"))), mdx(\"h3\", null, \"Measurements\"), mdx(\"p\", null, \"Measurements of a web-server pod using PHP-FPM and a separate nginx container:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"~1m 44 seconds to boot new node (EC2 instance)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"~15 seconds image pull\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"~20 seconds cache building and warmup\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"~5 seconds nginx retry interval\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"70 seconds initial readiness probe delay\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Times before optimizations\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Best time: 1 + 70s = 71 s\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Worst time:  60 + 44 + 1 + 15 + 70 = 190 = 3m 10s\"), mdx(\"p\", null, \"Reducing the initial readiness probe delay (best case):\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"1 + 25s = 26s  reduction of  63,4% vs current best case\"), mdx(\"p\", null, \"Pre-building cache (best case):\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"1 + 1s  = 2s  reduction of 97,1% vs current best case\"), mdx(\"p\", null, \"Pre-building cache (worst case):\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"1m 44s + 15 + 1 + 1 =  2m 1s  ~33% faster than current worst case\"), mdx(\"h3\", null, \"Preload\"), mdx(\"p\", null, \"Without preload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"hyperfine -r 1000 --warmup 10 \\\"bash test.sh\\\"\\n  Time (mean \\xB1 \\u03C3):      68.9 ms \\xB1  12.6 ms    [User: 3.7 ms, System: 5.9 ms]\\n  Range (min \\u2026 max):    42.3 ms \\u2026 179.9 ms    1000 runs\\n\")), mdx(\"p\", null, \"With preload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"hyperfine -r 1000 --warmup 10 \\\"bash test.sh\\\"\\n  Time (mean \\xB1 \\u03C3):      67.2 ms \\xB1  32.9 ms    [User: 3.5 ms, System: 5.5 ms]\\n  Range (min \\u2026 max):    57.5 ms \\u2026 1074.3 ms    1000 runs\\n\")), mdx(\"p\", null, \"-> Something is wrong with preload, unclear what \"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../../notes/published\"\n  }), \"#published\"), \" \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"In a typical Symfony project there are multiple caches built when running the  cache:warmup  command. By pre-building those caches andâ€¦","timeToRead":1}}},"pageContext":{"slug":"pre-build-symfony-caches-in-docker-containers"}},"staticQueryHashes":["318001574","3787687951"]}