{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/run-languagetool-locally-on-macos","result":{"data":{"brainNote":{"slug":"run-languagetool-locally-on-macos","title":"Run LanguageTool locally on macOS","inboundReferenceNotes":[{"title":"MacOS workflows and tools","slug":"macos-workflows-and-tools"}],"inboundReferences":["macos-workflows-and-tools"],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Grammarly like tool but without sending all of my keystrokes to the cloud. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://apps.apple.com/app/languagetool-for-safari/id1534275760\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Safari extension\"), \" enables grammar checks on all text inputs. \"), mdx(\"p\", null, \"To make it work it needs multiple components installed locally:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"languagetool\"), \" itself \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fasttext\"), \" for language detection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fasttext\"), \" model for language detection\")), mdx(\"h3\", null, \"Installation\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"brew install languagetool\\n\")), mdx(\"p\", null, \"To test it out run the following commands. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"curl\"), \" command should show JSON output.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"languagetool-server --port 8081 --allow-origin '*'\\n\")), mdx(\"p\", null, \"Open http://localhost:8081/v2/check?language=en-US&text=my+text to see if it works.\"), mdx(\"h3\", null, \"Local HTTPs\"), mdx(\"p\", null, \"To make the local server usable in Safari, it needs to use HTTPS. We can use caddy as a reverse proxy locally. It automatically manages a locally trusted certificate.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"brew install caddy\\n\")), mdx(\"p\", null, \"To test if HTTPs proxying works, run the following command. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"caddy reverse-proxy --from localhost:8082 --to localhost:8081\\n\")), mdx(\"p\", null, \"Open https://localhost:8082/v2/check?language=en-US&text=my+text to see if it works. \"), mdx(\"h3\", null, \"Fasttext\"), mdx(\"p\", null, \"Without this tool, LanguageTool will make mistakes detecting the language and recommend changes based on \"), mdx(\"h3\", null, \"Start in background\"), mdx(\"p\", null, \"Create the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/Library/LaunchAgents/org.languagetool.server.plist\"), \" with this content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n    <dict>\\n        <key>KeepAlive</key>\\n        <true />\\n        <key>Label</key>\\n        <string>org.languagetool.server</string>\\n        <key>ProgramArguments</key>\\n        <array>\\n            <string>/usr/local/bin/languagetool-server</string>\\n            <string>--port</string>\\n            <string>8081</string>\\n            <string>--allow-origin</string>\\n            <string>*</string>\\n        </array>\\n        <key>RunAtLoad</key>\\n        <true />\\n        <key>KeepAlive</key>\\n        <true />\\n        <key>inetdCompatibility</key>\\n        <dict>\\n            <key>Wait</key>\\n            <false />\\n        </dict>\\n    </dict>\\n</plist>\\n\")), mdx(\"p\", null, \"Create the file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/Library/LaunchAgents/org.languagetool.caddy-proxy.plist\"), \" with this content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\\n<plist version=\\\"1.0\\\">\\n    <dict>\\n        <key>KeepAlive</key>\\n        <true />\\n        <key>Label</key>\\n        <string>org.languagetool.caddy-proxy</string>\\n        <key>ProgramArguments</key>\\n        <array>\\n            <string>/usr/local/bin/caddy</string>\\n            <string>reverse-proxy</string>\\n            <string>--from</string>\\n            <string>localhost:8082</string>\\n            <string>--to</string>\\n            <string>localhost:8081</string>\\n        </array>\\n        <key>RunAtLoad</key>\\n        <true />\\n        <key>KeepAlive</key>\\n        <true />\\n        <key>inetdCompatibility</key>\\n        <dict>\\n            <key>Wait</key>\\n            <false />\\n        </dict>\\n    </dict>\\n</plist>\\n\")), mdx(\"p\", null, \"Then load both automatically at startup:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"launchctl load ~/Library/LaunchAgents/org.languagetool.server.plist\\nlaunchctl load ~/Library/LaunchAgents/org.languagetool.caddy-proxy.plist\\n\")), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"launchctl unload [file]\"), \" to uninstall.\"), mdx(\"h3\", null, \"Safari Extension\"), mdx(\"p\", null, \"In the LanguageTool settings, under \\\"Experimental settings\\\" enter \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://localhost:8082/v2\"), \" as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Other server\"), \" setting. \"), mdx(\"h3\", null, \"Obsidian Integration\"), mdx(\"p\", null, \"Use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Clemens-E/obsidian-languagetool-plugin\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Obsidian LanguageTool Plugin\"), \" with the URL \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"https://localhost:8082\"), \" to enable LanguageTool on notes.\"), mdx(\"h3\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://tex.stackexchange.com/questions/538530/how-to-setup-languagetool-for-texstudio-installed-via-homebrew-on-macos\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Install via HomeBrew\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://dev.languagetool.org/http-server\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://forum.languagetool.org/t/languagetool-for-safari/5554/22\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Setup Safari extension\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.launchd.info\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Launchd configuration\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../../../notes/published\"\n  }), \"#published\"), \" \"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Grammarly like tool but without sending all of my keystrokes to the cloud. The  Safari extension  enables grammar checks on all text inputsâ€¦","timeToRead":1}}},"pageContext":{"slug":"run-languagetool-locally-on-macos"}},"staticQueryHashes":["318001574","3787687951"]}