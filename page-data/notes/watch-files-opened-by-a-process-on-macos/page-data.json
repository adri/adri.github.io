{"componentChunkName":"component---plugins-gatsby-theme-brain-src-templates-brain-js","path":"/notes/watch-files-opened-by-a-process-on-macos","result":{"data":{"brainNote":{"slug":"watch-files-opened-by-a-process-on-macos","title":"Watch files opened by a process on macOS","inboundReferenceNotes":[{"title":"SRE","slug":"sre","childMdx":{"excerpt":"Production reliability Troubleshoot performance SLA SLI SLO Chaos engineering Scalability of software systems Security of software systems…"}}],"inboundReferences":["sre"],"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"On macOS there is a tool called  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fs_usage\"), \" which can be used to see what files are accessed on the system while it is running. It needs sudo to run.\"), mdx(\"h3\", null, \"Watch files by process\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Find out the PID of the process that should be monitored \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"ps aux | grep php-fpm\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Listen for file system access \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo fs_usage -f \\\"pathname\\\" [pid]\\n\")), mdx(\"h3\", null, \"Explanation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"access\"), \"  checks whether the calling process can access the file pathname\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"open\"), \" creates a new open file description, an entry in the system-wide table of open files\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"close\"), \" closes a file descriptor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stat64\"), \" returns information about a file\")), mdx(\"h3\", null, \"Sources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://manpagez.com/man/1/fs_usage/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"http://manpagez.com/man/1/fs_usage/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://linux.die.net/man/2/access\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"https://linux.die.net/man/2/access\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://linux.die.net/man/2/open\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"https://linux.die.net/man/2/open\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://linux.die.net/man/2/stat64\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"https://linux.die.net/man/2/stat64\"))), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes/published\"\n  }), \"#published\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"On macOS there is a tool called   fs_usage  which can be used to see what files are accessed on the system while it is running. It needs…"}}},"pageContext":{"slug":"watch-files-opened-by-a-process-on-macos"}},"staticQueryHashes":["318001574","3787687951","3787687951"]}