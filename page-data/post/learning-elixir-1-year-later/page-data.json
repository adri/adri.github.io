{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/post/learning-elixir-1-year-later/","result":{"data":{"post":{"__typename":"MdxPost","slug":"/post/learning-elixir-1-year-later","title":"Learning Elixir: 1 year later","date":"2017-12-13","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Learning Elixir: 1 year later\",\n  \"slug\": \"/post/learning-elixir-1-year-later\",\n  \"summary\": \"One year ago I dived into learning Elixir. It's time for a retrospective.\",\n  \"categories\": \"elixir, side-project, graphql, learning\",\n  \"banner\": \"https://cloud.githubusercontent.com/assets/133832/21369161/f3b8dae6-c705-11e6-8f9e-2195ebb85a95.png\",\n  \"date\": \"2017-12-13T00:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One year ago I started learning \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://elixir-lang.github.io/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Elixir\"), \" because I saw \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adrian-philipp.com/post/why-elixir-has-great-potential\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"great potential\"), \". This is my retrospective, looking back on my journey so far with Elixir.\"), mdx(\"h3\", null, \"TLDR - summary\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"During the last year I liked functional programming, the Elixir language, the community, parallel tests, the fast workflow, the dependency management and the powerful platform. I had troubles with Erlangs cryptic error messages, IDE support, code density and deployments. My excitement for Elixir is still as high!\")), mdx(\"h2\", null, \"What I did in 2017\"), mdx(\"p\", null, \"Before reflecting on how I liked things in Elixir land, I like to summarize \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"what\"), \" I actually did.\"), mdx(\"h3\", null, \"Books\"), mdx(\"p\", null, \"After watching screencast series and doing exercises mentioned in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adrian-philipp.com/post/why-elixir-has-great-potential\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"blog post one year ago\"), \" I have read the following books:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.manning.com/books/elixir-in-action\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Elixir in Action\"), \" by Sa\\u0161a Juri\\u0107\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pragprog.com/book/lhelph/functional-web-development-with-elixir-otp-and-phoenix\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Functional Web Development with Elixir, OTP, and Phoenix\"), \" by Lance Halvorsen\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pragprog.com/book/cdc-elixir/learn-functional-programming-with-elixir\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Learn Functional Programming with Elixir\"), \" by Ulisses Almeida\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pragprog.com/book/wwgraphql/craft-graphql-apis-in-elixir-with-absinthe\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Craft GraphQL APIs in Elixir with Absinthe (beta)\"), \" by Bruce Williams and Ben Wilson\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pragprog.com/book/tvmelixir/adopting-elixir\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Adopting Elixir (beta)\"), \" by Ben Marx, Jos\\xE9 Valim, Bruce Tate\")), mdx(\"p\", null, \"Out of these books I found Elixir in Action the most challenging (in a good way) and inspiring. In a way that's also because it was one of the first books I've read. Which means that some content was repeated in other books. For GraphQL specifically I really liked what's already available in \\\"Craft GraphQL APIs in Elixir with Absinthe (beta)\\\".\"), mdx(\"h3\", null, \"Talks\"), mdx(\"p\", null, \"Playlists of Elixir conference talks I watched:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=bd_EIWU9GzQ&list=PLqj39LCvnOWZMVugtyKlHMF1o2zPNntFL\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"ElixirConf 2017\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=kMHXd_iMGRU&list=PLWbHc_FXPo2jV6N5XEjbUQe2GkYcRkZdD\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"ElixirConf EU 2017\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=tMO28ar0lW8&list=PLE7tQUdRKcyaMEekS1T32hUw19UxzqBEo\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Lonestar Elixir 2017\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=fTYkbPBOt1o&list=PLE7tQUdRKcyZV6tCYvrBLOGoyxUf7s9RT\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"ElixirDaze 2017\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=nvV-4040xXI&list=PLyO-58-sOapxgGz6S53Iklyv4s96ePyjS\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"EMPEX 2017\"))), mdx(\"h3\", null, \"Side projects\"), mdx(\"p\", null, \"My preferred way to learn new technologies is to solve problems that I see.\"), mdx(\"p\", null, \"This brings two things: having a solution to a problem and learning about different aspects of a technology. These aspects are for me: development speed, testability, maintainability, reliability and observability in production, community support, tooling support and performance.\"), mdx(\"h4\", null, \"Estimator\"), mdx(\"p\", null, \"The first side-project was about solving a problem I saw at work. I saw a need for a Planning Poker tool that integrates with Jira. The tool called Estimator is used since June regularly, about every 1-2 weeks by two teams. Here is a demo:\"), mdx(\"div\", {\n    className: \"video-container\"\n  }, mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/uEaGnlmUaWE\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })), mdx(\"br\", null), mdx(\"p\", null, \"What I did during this side-project:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Soft realtime synchronisation of data via websockets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Authentication via Github\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deploying to Heroku\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Database usage via Ecto: schemas, migrations, queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using external APIs (Jira)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Caching data across requests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Continuous integration setup\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A little bit about automated testing\")), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adri/estimator\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"source code is on Github\"), \". Read more about it in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adrian-philipp.com/post/learning-elixir-first-side-project\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Estimator blog post\"), \".\"), mdx(\"h4\", null, \"Picape\"), mdx(\"p\", null, \"The second side-project is a tool to make it easier to order ingredients at a home delivery supermarket. Picape holds a mapping of recipes and their ingredients to products from a supermarket. For the last 3 months, we are using the tool twice a week. Here is a demo:\"), mdx(\"div\", {\n    className: \"video-container\"\n  }, mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/qhtsn7rZClQ\",\n    frameBorder: \"0\",\n    allowFullScreen: true\n  })), mdx(\"br\", null), mdx(\"p\", null, \"What I did during this side-project:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Building a GraphQL API in Elixir\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automated parallel testing of GraphQL, databases and websockets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Structuring an application using Phoenix Contexts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Deploying on a VPS (virtual private server) with git push\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Integrating Sentry for error tracking and Timber for logs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Code coverage with Codecov\")), mdx(\"p\", null, \"The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adri/picape\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"source code is on Github\"), \". Read more about it in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adrian-philipp.com/post/learning-elixir-second-side-project-part1\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Picape blog post\"), \".\"), mdx(\"h2\", null, \"What I liked\"), mdx(\"p\", null, \"There are many small details that I liked. When looking at the whole year I would mention these points in particular:\"), mdx(\"h5\", null, \"Functional programming\"), mdx(\"p\", null, \"Before learning Elixir, I have applied functional programming principles in Javascript with Lodash and Ramda. It turned out to be mind bending when these principles are the only ones available \\u2013 like in Elixir. I'm happy to have gone \\\"through the pain\\\". In the beginning the syntax looked strange and confusing to me. But after few days, when the concepts began to \\\"click\\\", I started to see the beauty of it.\"), mdx(\"h5\", null, \"Elixir language\"), mdx(\"p\", null, \"Once I was used to the pipeline operator \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|>\"), \", pattern matching and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"with\"), \" statement I started to miss it in other languages.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"with\"), \" statement I find particularly nice because it simplifies error handling in a sequence of function calls. There is a great explanation and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/34210281/how-to-use-the-with-keyword-in-elixir-and-what-is-it-for\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"example on StackOverflow\"), \".\"), mdx(\"h5\", null, \"Community\"), mdx(\"p\", null, \"I was hanging out in Slack channels, read blog posts and some forums. What I consistently noticed is how friendly, helpful and open the community is. I'm not saying that other communities are less good. Just that Elixirs community is at least as good.\"), mdx(\"h5\", null, \"Parallel tests\"), mdx(\"p\", null, \"My phone has 6 CPU cores. Looking at the increase of cores in devices over the last years makes parallelism in programming more important. One area where leveraging parallelism is great, is running automated tests in Elixir. Especially integration tests with databases.\"), mdx(\"p\", null, \"As projects grow, their automated tests get slower. It takes a constant effort to keep the test times low, to be able to move fast. This is still the case with Elixir, but using all available resources without having developers caring about it can minimize this effort.\"), mdx(\"h5\", null, \"Fast workflow\"), mdx(\"p\", null, \"Developing in Elixir using the web framework Phoenix feels very similar to using PHP. Code changes don't need a server restart like in NodeJS. I like how live reloading on code changes comes out of the box, making the developer experience even better.\"), mdx(\"h5\", null, \"Dependency management\"), mdx(\"p\", null, \"Using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://elixir-lang.github.io/getting-started/mix-otp/introduction-to-mix.html\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Mix\"), \" with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hex.pm/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"hex\"), \" to install and update library dependencies is a pleasure. It is fast, customizable, reliable and gives helpful instructions in case of conflicts. Especially compared to Composer, a PHP dependency manager, I found this a much better experience. Don't get me wrong, I still think Composer is a great software and transformed the PHP world a few years ago.\"), mdx(\"h5\", null, \"Powerful Platform\"), mdx(\"p\", null, \"I'm repeating a bit what I mentioned last year but I still want to stress the importance of running Erlang under the hood. The following comparison shows what I mean:\"), mdx(\"div\", {\n    \"style\": {\n      \"maxWidth\": \"500px\"\n    }\n  }, mdx(\"span\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"960px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/static/6bd3b9c50df6f7208e6278635d786e48/f2729/elixir-erlang-comparison.jpg\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": \"noopener\"\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"52.083333333333336%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundImage\": \"url('data:image/svg+xml,%3csvg%20xmlns=\\\\'http://www.w3.org/2000/svg\\\\'%20width=\\\\'400\\\\'%20height=\\\\'208\\\\'%20viewBox=\\\\'0%200%20400%20208\\\\'%20preserveAspectRatio=\\\\'none\\\\'%3e%3cpath%20d=\\\\'M5%2035v14h69l318-1%201-13V23l-194-1H5v13\\\\'%20fill=\\\\'%23d3d3d3\\\\'%20fill-rule=\\\\'evenodd\\\\'/%3e%3c/svg%3e')\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"picture\", {\n    parentName: \"a\"\n  }, \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/6bd3b9c50df6f7208e6278635d786e48/cbea2/elixir-erlang-comparison.webp 240w\", \"/static/6bd3b9c50df6f7208e6278635d786e48/42669/elixir-erlang-comparison.webp 480w\", \"/static/6bd3b9c50df6f7208e6278635d786e48/10c02/elixir-erlang-comparison.webp 960w\", \"/static/6bd3b9c50df6f7208e6278635d786e48/b2aca/elixir-erlang-comparison.webp 980w\"],\n    \"sizes\": \"(max-width: 960px) 100vw, 960px\",\n    \"type\": \"image/webp\"\n  })), \"\\n        \", mdx(\"source\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"srcSet\": [\"/static/6bd3b9c50df6f7208e6278635d786e48/46946/elixir-erlang-comparison.jpg 240w\", \"/static/6bd3b9c50df6f7208e6278635d786e48/55489/elixir-erlang-comparison.jpg 480w\", \"/static/6bd3b9c50df6f7208e6278635d786e48/18e3b/elixir-erlang-comparison.jpg 960w\", \"/static/6bd3b9c50df6f7208e6278635d786e48/f2729/elixir-erlang-comparison.jpg 980w\"],\n    \"sizes\": \"(max-width: 960px) 100vw, 960px\",\n    \"type\": \"image/jpeg\"\n  })), \"\\n        \", mdx(\"img\", _extends({\n    parentName: \"picture\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"src\": \"/static/6bd3b9c50df6f7208e6278635d786e48/18e3b/elixir-erlang-comparison.jpg\",\n    \"alt\": \"Erlang technology comparison\",\n    \"title\": \"Erlang technology comparison\",\n    \"loading\": \"lazy\",\n    \"style\": {\n      \"width\": \"100%\",\n      \"height\": \"100%\",\n      \"margin\": \"0\",\n      \"verticalAlign\": \"middle\",\n      \"position\": \"absolute\",\n      \"top\": \"0\",\n      \"left\": \"0\"\n    }\n  })), \"\\n      \"), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.manning.com/books/elixir-in-action\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Source\")), mdx(\"p\", null, \"All components are solid. Apart from a PostgreSQL database I had no infrastructure setup. This is great for development and production simplicity. Note that you can still use software like Redis, Memcached, Cron etc if needed. Some examples:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/adri/picape/commit/12f9f12a0e361b1b4d2f2f825bc011589b94d9c6\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Adding a \\u201Ccronjob\\u201D\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/adri/picape/commit/c7c9c5dcadd776913b27da4da3534ea2d16ea87e\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Adding a reverse proxy\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding caching across requests (using ETS under the hood):\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-elixir\"\n  }), \"ConCache.get_or_store(:bucket, key, fn() -> compute(key) end)\\n\")), mdx(\"h2\", null, \"What I didn't like\"), mdx(\"p\", null, \"Like with everything, there are some cons. Or I didn't understand it well enough yet.\"), mdx(\"h5\", null, \"Erlang's cryptic error messages\"), mdx(\"p\", null, \"I have to say that Elixirs error messages are very helpful. More helpful compared to PHP and Javascript. However, Elixir runs on Erlang. Those messages can be sometimes a bit cryptic. Unfortunately (for this blog post) I can't see my production error messages anymore. The last error is too long ago.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.google.nl/search?&q=elixir+error+messages+cryptic\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Searching for this\"), \" reveals some error messages like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"(ArithmeticError) bad argument in arithmetic expression\"), \". Those I find hard to make sense of. I like that Elixir core developers are contributing to Erlang to improve this: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/elixir-lang/elixir/issues/6142\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"example\"), \".\"), mdx(\"h5\", null, \"IDE support\"), mdx(\"p\", null, \"I've used many editors like VIM, Atom and VSCode. When working with PHP I'm happy with PHPStorm and the features from WebStorm with support for Javascript\\xA0and other web technologies. The Elixir language support is not yet on par. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/KronicDeth/intellij-elixir\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Elixir plugin for IntelliJ\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/JakeBecker/elixir-ls\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Elixir language server\"), \" are awesome efforts to improve this though.\"), mdx(\"h5\", null, \"Code Density\"), mdx(\"p\", null, \"Elixir is a very nice language and it is very expressive. This expressiveness means that code can get dense. Especially when pattern matching is new to someone.\"), mdx(\"p\", null, \"To not step on anyones toes, let's look at some code I wrote last year. It's an exercise on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://exercism.io\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"exercism.io\"), \". A function that returns whether the first list is a sublist or a superlist of a second list, and if not whether it is equal or unequal to the second list. Here \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://exercism.io/submissions/4d02217954a84b98aa7533eb52d643f9\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"my solution using pattern matching on function definitions and recursion\"), \". This is performant but I find it also hard to see what's happening.\"), mdx(\"p\", null, \"I felt it was too hard to read for my future self and picked up \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://exercism.io/submissions/7ba724dfeb8b43bcb6b5c9b32a048ea3\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"an idea from another solution for this problem not using recursion\"), \". This is much slower but in my opinion easier to read.\"), mdx(\"p\", null, \"My point here is: I like the expressiveness of Elixir. When trying to pack too much information in a piece of code it can become too dense though.\"), mdx(\"h5\", null, \"Deployments\"), mdx(\"p\", null, \"Deployments could be better supported out of the box. The best experience was deploying to Heroku, this works great.\"), mdx(\"p\", null, \"For Picape I could not use Heroku however because I wanted to separate the frontend (running on NodeJS, using next.js) and backend (Elixir/Erlang process) but keep the simplicity of one repository. I ended up with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adri/picape/blob/master/config/prod.exs#L23-L25\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"starting a NodeJS process\"), \" when starting Elixir/Erlang. On Heroku I had issues opening multiple ports and get the forwarding working.\"), mdx(\"p\", null, \"Deploying to my VPS was easy but I had to do \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adri/picape/blob/master/bin/update\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"some\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/adri/picape/blob/master/bin/deploy\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"scripting\"), \" and find out how to restart the Elixir process. This is by no means a zero downtime deployment. I would love to learn a way how to do this properly.\"), mdx(\"h2\", null, \"Summarizing\"), mdx(\"p\", null, \"I'm very happy to have learned Elixir and I'm planning to learn more. I think it helps me to become a better developer. It's awesome to see that so many great people are working on Elixir and improving it.\"), mdx(\"p\", null, \"A few upcoming things I'm excited about: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/lpil/exfmt\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Elixir formatter\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://elixir-lang.github.io/blog/2017/10/31/stream-data-property-based-testing-and-data-generation-for-elixir/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"property-based testing\"), \", an abstraction for monitoring Phoenix and improved deployment tools.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"One year ago I started learning  Elixir  because I saw  great potential . This is my retrospective, looking back on my journey so far with…","timeToRead":6,"banner":null}},"pageContext":{"slug":"/post/learning-elixir-1-year-later","formatString":"YYYY-MM-DD"}},"staticQueryHashes":["318001574","3787687951"]}