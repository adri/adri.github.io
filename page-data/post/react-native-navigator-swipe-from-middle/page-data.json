{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/post/react-native-navigator-swipe-from-middle","result":{"data":{"post":{"__typename":"MdxPost","slug":"/post/react-native-navigator-swipe-from-middle","title":"Better back swiping with the React Native Navigator","date":"2016-01-17","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Better back swiping with the React Native Navigator\",\n  \"slug\": \"/post/react-native-navigator-swipe-from-middle\",\n  \"summary\": \"Swiping back works only close to the edge by default which can be hard to accomplish. It is easy to optimize this.\",\n  \"date\": \"2016-01-17T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When observing people testing out an React Native iOS app on a phone which uses the\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/react-native/docs/navigator.html\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Navigator library\"), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"I noticed that swiping back from a detail screen to an overview screen\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"is a bit hard to acomplish. You have to swipe very close from the edge of the screen\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"to navigate back. When there is a case around the the screen it gets even trickier.\"), mdx(\"p\", null, \"Luckily it is easy to optimize this. The Navigator uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ScreenConfigs\"), \" to describe\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"screen transitions. Unfortunately I didn't find much documentation around scene configs\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"but the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/facebook/react-native/blob/master/Libraries/CustomComponents/Navigator/NavigatorSceneConfigs.js\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"NavigatorSceneConfigs.js\")), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"is very descriptive.\"), mdx(\"p\", null, \"To adjust the area where a swipe from the edge should be counted as a back navigation,\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"you can adjust the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeHitWidth\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gestures\"), \" part of the scene config.\"), mdx(\"p\", null, \"For example you can create a new SceneConfig which uses the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FloatFromRight\"), \" scene config and\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"overwrite the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"edgeHitWidth\"), \" to be able to swipe anywhere in the left half of the screen.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const SCREEN_WIDTH = require(\\\"Dimensions\\\").get(\\\"window\\\").width;\\n\\n/**\\n * Overwrite the default navigator scene config.\\n * to use a wider area for back swiping.\\n */\\nconst FloatFromRight = {\\n  ...Navigator.SceneConfigs.FloatFromRight,\\n  gestures: {\\n    pop: {\\n      ...Navigator.SceneConfigs.FloatFromRight.gestures.pop,\\n      edgeHitWidth: SCREEN_WIDTH / 2,\\n    },\\n  },\\n};\\n\")), mdx(\"p\", null, \"You can use your own scene config in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"configureScene\"), \" callback as a property of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Navigator\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"  render() {\\n    return (\\n      <Navigator\\n        initialRoute = {...}\\n        configureScene={() => FloatFromRight}\\n        renderScene={this.renderScene}\\n      />\\n    );\\n  }\\n\")), mdx(\"p\", null, \"I recommend diving into the well written \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/facebook/react-native/blob/master/Libraries/CustomComponents/Navigator/NavigatorSceneConfigs.js\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"NavigatorSceneConfigs.js\")), \" to find out how you can customize your animations.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"When observing people testing out an React Native iOS app on a phone which uses the Navigator library I noticed that swiping back from aâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/post/react-native-navigator-swipe-from-middle","formatString":"YYYY-MM-DD"}},"staticQueryHashes":["318001574","3787687951"]}