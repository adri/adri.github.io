{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/post/use-es6-in-node-and-browser-traceur","result":{"data":{"post":{"__typename":"MdxPost","slug":"/post/use-es6-in-node-and-browser-traceur","title":"ES6 in Node and in your Browser with Traceur","date":"2014-11-20","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"ES6 in Node and in your Browser with Traceur\",\n  \"slug\": \"/post/use-es6-in-node-and-browser-traceur\",\n  \"summary\": \"How to use Google traceur to transpile ES6 javascript to ES5.\",\n  \"date\": \"2014-11-20T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"How to make it work in node\"), mdx(\"p\", null, \"Install traceur and save it to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"npm install traceur --save\\n\")), mdx(\"p\", null, \"Add the following code to your node entry point, in my case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"server.js\"), \". This will transpile required files to valid ES5 syntax on the fly but ignores your dependencies to not spend time transpiling those.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var traceur = require(\\\"traceur\\\");\\ntraceur.require.makeDefault(function (filename) {\\n  // don't transpile our dependencies, just our app\\n  return filename.indexOf(\\\"node_modules\\\") === -1;\\n});\\n\\nrequire(\\\"./src/app.js\\\");\\n\")), mdx(\"p\", null, \"Start the server with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node server.js\"), \" and enjoy the new features.\"), mdx(\"h2\", null, \"How to make it work in the browser\"), mdx(\"p\", null, \"It makes sense to transpile your app into a ES5 javascript file once, which is then loaded by a browser in order to not have users waiting for the transpiling process every time. For that I like to use webpack and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"traceur-loader\"), \" package:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm install --save-dev webpack traceur-loader\\n\")), mdx(\"p\", null, \"Create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webpack.config.js\"), \", here I'm using a different entry point \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/web/app.js\"), \" which should be loaded. Webpack will automatically include all required dependencies in the resulting javascript bundle. The most interesting line is the loader definition where all javascript files in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory will be run through traceur.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"module.exports = {\\n  entry: {\\n    bundle: \\\"./src/web/app.js\\\",\\n  },\\n  output: {\\n    path: \\\"build/js\\\",\\n    filename: \\\"[name].js\\\",\\n  },\\n  module: {\\n    loaders: [\\n      {\\n        test: /src\\\\/.*\\\\.js$/,\\n        loader: \\\"traceur?experimental=true&runtime=true\\\",\\n      },\\n    ],\\n  },\\n};\\n\")), mdx(\"p\", null, \"For development I recommend running webpack with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-d\"), \" flag which generates source maps and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--watch\"), \" flag to recompile changed files incrementally.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"node_modules/.bin/webpack --config webpack.config.js --watch -d --progress\\n\")), mdx(\"p\", null, \"The resulting ES5 javascript file will be in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build/js/bundle.js\"), \" and can be included in a browser:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<script src=\\\"build/js/bundle.js\\\" />\\n\")), mdx(\"p\", null, \"See a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/google/traceur-compiler/wiki/LanguageFeatures\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"list of possible language features\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"How to make it work in node Install traceur and save it to your  package.json . Add the following code to your node entry point, in my caseâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/post/use-es6-in-node-and-browser-traceur","formatString":"YYYY-MM-DD"}},"staticQueryHashes":["318001574","3787687951"]}