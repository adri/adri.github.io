{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/post/why-elixir-has-great-potential/","result":{"data":{"post":{"__typename":"MdxPost","slug":"/post/why-elixir-has-great-potential","title":"Why the Elixir language has great potential","date":"2016-12-21","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Why the Elixir language has great potential\",\n  \"slug\": \"/post/why-elixir-has-great-potential\",\n  \"summary\": \"Elixir enables creating fast, reliable and concurrent modern applications with high productivity\",\n  \"categories\": \"Elixir Erlang\",\n  \"date\": \"2016-12-21T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Update: There is a nice discussion on \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"https://news.ycombinator.com/item?id=13235004\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Hacker News\"), \" about this blog post.\")), mdx(\"p\", null, \"As a developer I think it is important to stay up to date with new developments. But mostly I love learning new things ;-)\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"This means to be on the lookout for current trends in the tech industry, guessing their potential and trying them out. Sometimes I\\u2019m right. For example: A few months ago, adopting \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://enrise.com/2016/10/why-we-use-graphql/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"GraphQL\"), \" turned out to be a good guess.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cloud.githubusercontent.com/assets/133832/21369161/f3b8dae6-c705-11e6-8f9e-2195ebb85a95.png\",\n    \"alt\": \"Elixir\"\n  }))), mdx(\"p\", null, \"One development that kept me busy next to work for the last few weeks was the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", _extends({\n    parentName: \"strong\"\n  }, {\n    \"href\": \"http://elixir-lang.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Elixir\")), \" language. My background is for the biggest parts in PHP and Javascript. Learning a programming language that is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dynamic, functional, immutable, and supports concurrency and pattern matching\"), \" can be mind bending. But apart from being a modern language, Elixir intrigues me because it\\u2026\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Compiles to Erlang\"), mdx(\"br\", null), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Running on the battle tested \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.erlang.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Erlang VM\"), \" is a great choice because its built-in support for concurrency, distribution and fault tolerance. Before looking into Elixir I wasn\\u2019t aware how versatile the Erlang VM is and how much it can simplify a tech stack.\"), mdx(\"undefined\", {\n    parentName: \"li\"\n  }, mdx(\"img\", {\n    \"src\": \"https://cloud.githubusercontent.com/assets/133832/21369162/f3bbf0aa-c705-11e6-8fb8-5f163eb47cd4.jpg\",\n    \"title\": \"Erlang technology comparison\",\n    \"style\": {\n      \"width\": \"500px\"\n    }\n  }), mdx(\"br\", null), \"[Source](https://www.manning.com/books/elixir-in-action)\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Quality of libraries\"), mdx(\"br\", null), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"For all my needs so far, I found some library. The quality and maturity of libraries surprised me. For example: the web framework \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.phoenixframework.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Phoenix\"), \", the database abstraction \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hexdocs.pm/ecto/getting-started.html\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Ecto\"), \" and the GraphQL library \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://absinthe-graphql.org\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Absinthe\"), \". Many more libraries can be found on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hex.pm\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"package manager hex\"), \".\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Path for scalability\"), mdx(\"br\", null), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Premature optimization is costly. Rewrites caused by quick and dirty work are as well. Thanks to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"message passing\"), \" and processes of Erlang there is actually a very nice path for scaling from small to large while reducing waste:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> 1. Design your code around processes\\n> 2. Separate these processes into OTP apps\\n> 3. When an OTP app gets too much load, move it to its own node on better hardware\\n\\nSource: [Learn Phoenix episode \\u201CScaling Phoenix\\u201D](https://www.learnphoenix.tv/episodes/scaling).\\n\")))), mdx(\"p\", null, \"4) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Reliability and resilience\"), mdx(\"br\", null), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Contrary to processes in other programming languages, a process that fails in Erlang doesn\\u2019t kill the whole application. If a process dies it can be restarted by a supervisor. Organising an application in supervision trees enables building very reliable systems, containing failures within each component. Erlang is known for it\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://verraes.net/2014/12/erlang-let-it-crash/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Let It Crash\"), \" philosophy.\"), mdx(\"p\", null, \"5) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Performance\"), mdx(\"br\", null), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"So far I\\u2019m very happy with the speed of Elixir/Erlang. Reading about \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engineering.pinterest.com/blog/introducing-new-open-source-tools-elixir-community\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"sub-millisecond response times\"), \" and scaling to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.phoenixframework.org/blog/the-road-to-2-million-websocket-connections\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"2 million active websocket connections on one server\"), \" lets me not worry much about this topic just yet.\"), mdx(\"img\", {\n    \"src\": \"https://cloud.githubusercontent.com/assets/133832/21369160/f3b89130-c705-11e6-861a-e5a72728eb7c.png\",\n    \"title\": \"Phoenix scalability\",\n    \"style\": {\n      \"width\": \"500px\"\n    }\n  }), mdx(\"p\", null, \"   Especially when compared to PHP, Elixir comes with great performance. Being able to handle so many websocket connections enables a whole different user experience for web and mobile apps. I\\u2019m looking forward to using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev-blog.apollodata.com/graphql-subscriptions-in-apollo-client-9a2457f015fb#.weuza15z1\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Elixir with GraphQL subscriptions\"), \".\"), mdx(\"p\", null, \"6) \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Industry adoption\"), mdx(\"br\", null), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Although Elixir is quite young, I was glad to see usages by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://engineering.pinterest.com/blog/introducing-new-open-source-tools-elixir-community\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Pinterest\"), \", Bleacher Report, Brightcove, and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.quora.com/What-big-projects-use-Elixir\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"more\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/doomspork/elixir-companies\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"more\"), \").\"), mdx(\"h2\", null, \"The Elixir Language\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Why do functional programmers homeschool their kids?\", mdx(\"br\", null), mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Because they hate classes\")), mdx(\"p\", null, \"The creator of Elixir is the well-known Rubyist Jos\\xE9 Valim.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"The language is influenced by Ruby which makes it subjectively nice to read. I don\\u2019t want to go into the language in detail, as \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://elixir-lang.org/getting-started/introduction.html\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"other people\"), \" did this already much better than I could do.\"), mdx(\"p\", null, \"What I wanted to highlight is the usefulness of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://elixir-lang.org/getting-started/enumerables-and-streams.html#the-pipe-operator\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"pipe operator\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"|>\"), \". It works just like the unix pipeline and shuffles the return value of function A into the argument of function B. Instead of writing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"b(a())\"), \" you can write \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a() |> b()\"), \".\"), mdx(\"p\", null, \"There are many more things I like, for example pattern matching, the built in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://hexdocs.pm/elixir/Stream.html\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"Stream\"), \" module\"), \", extensibility via macros and protocols, documentation in markdown format, shared nothing concurrent programming (actor model) and much more.\"), mdx(\"h2\", null, \"Tips for learning Elixir\"), mdx(\"p\", null, \"Coming from object oriented programming languages it wasn\\u2019t easy to unlearn patterns I practiced for years. But well worth it. How to get started?\"), mdx(\"h4\", null, \"Screencast series\"), mdx(\"p\", null, \"I\\u2019m a big fan of screencasts. I like the combination between seeing code and hearing explanation at the same time. Luckily I found two nice screencast series about Elixir and Phoenix:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.learnelixir.tv\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"LearnElixir.tv\"), \": Great to start with this. Nice exercises.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.learnphoenix.tv\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"LearnPhoenix.tv\"), \": Best to look into after learning some Elixir.\")), mdx(\"p\", null, \"I also saw that there is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.dailydrip.com/topics/elixir\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"DailyDrip Elixir\"), \" which I\\u2019d like to watch in the future.\"), mdx(\"h4\", null, \"Exercises\"), mdx(\"p\", null, \"Just watching screencast series won\\u2019t teach you a language. Practice is important. One way to do this, are the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://exercism.io/languages/elixir/exercises\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"exercises on exercise.io\"), \". These exercises are small, fun and teach a lot about the language. Reading solutions of other people after submitting your own is a great way to learn about alternative and maybe better code.\"), mdx(\"h4\", null, \"Books\"), mdx(\"p\", null, \"Although I haven\\u2019t gotten the chance to read these books myself, I heard good things about them:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pragprog.com/book/elixir13/programming-elixir-1-3\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Programming Elixir 1.3\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pragprog.com/book/phoenix/programming-phoenix\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }), \"Programming Phoenix\"))), mdx(\"h2\", null, \"Elixirs future?\"), mdx(\"p\", null, \"Who knows. From what I see now, Elixir, although young, has great potential to become mainstream. It enables creating fast, reliable and concurrent modern applications with high productivity. I plan to use Elixir in 2017 at least for some side-projects.\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Update: There is a nice discussion on  Hacker News  about this blog post. As a developer I think it is important to stay up to date with new…","timeToRead":3,"banner":null}},"pageContext":{"slug":"/post/why-elixir-has-great-potential","formatString":"YYYY-MM-DD"}},"staticQueryHashes":["318001574","3787687951"]}